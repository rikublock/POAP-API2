import jwt from "jsonwebtoken";
import { sign, verify, deriveKeypair,  } from "ripple-keypairs";
import { Wallet, convertStringToHex, convertHexToString } from "xrpl";

describe("decode token", () => {
  const token =
    "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiI1NzQ4NGExNC1kYjYzLTRjNzItYTBiNy00ZTUwMjRhMThiZDciLCJzdGF0ZSI6Ijc2MmMyMjc5YmQxMDIyNTFmMmZiNTI5ZThiMDkyMGM3MzkzMmQ0NGZkOTg3NmIwOTdiNzBiMzY2MzAyZmFlYzVhYmEwZDY5MTI0NWFiMTQ4ZjY0NzhkYTYxNjZlYzQwNmUwNTAxYTM5OWNhMDA3NGVjYTMzNDMxNjAzYTkwOWIyIiwic2NvcGUiOiJYdW1tUGtjZSIsImF1ZCI6IjU3NDg0YTE0LWRiNjMtNGM3Mi1hMGI3LTRlNTAyNGExOGJkNyIsInN1YiI6InJuOFlaaTRWRUZaQVJhdk50Ym9wcUVmaDZOWHljWGc3ZU4iLCJlbWFpbCI6IjU3NDg0YTE0LWRiNjMtNGM3Mi1hMGI3LTRlNTAyNGExOGJkNytybjhZWmk0VkVGWkFSYXZOdGJvcHFFZmg2Tlh5Y1hnN2VOQHh1bW0ubWUiLCJhcHBfdXVpZHY0IjoiNTc0ODRhMTQtZGI2My00YzcyLWEwYjctNGU1MDI0YTE4YmQ3IiwiYXBwX25hbWUiOiJQT0FQIFRlc3QiLCJwYXlsb2FkX3V1aWR2NCI6IjgxMmMzMmFjLWI4ZTctNGYyZi05ZTdlLWY0ZDgwZTQ0NWJkYSIsInVzZXJ0b2tlbl91dWlkdjQiOiJhNmZmZGFjNi01OTFjLTQxZDEtOWE1YS1iOGU5NDc3Y2U0ODgiLCJuZXR3b3JrX3R5cGUiOiJURVNUTkVUIiwibmV0d29ya19lbmRwb2ludCI6IndzczovL3MuYWx0bmV0LnJpcHBsZXRlc3QubmV0OjUxMjMzIiwiaWF0IjoxNjg3NjI3OTMwLCJleHAiOjE2ODc3MTQzMzAsImlzcyI6Imh0dHBzOi8vb2F1dGgyLnh1bW0uYXBwIn0.un1DDFFE5L5v5kjUR6uGCR8P-KIdOofACMU09wIOQbKInmFN-N09CJqSzzb2Oq07WvqZ1XYiQVKBK4iZ36OFXwRLP38s44_u9IUZOtNevUWSyMz5vk_tBx8MSKgt8E-s5hkWQzPMeQC9pRRKtwrzOqjn0zyBbtbHoyq6nY2rmstiwycT1fENGETi_cUJVKvVW6ZA-rZqNt33WmuClVdOdf7QumeTh-4mXw8cSRJLRLcdJiC2aKHzvTjs0BICYoYynVS-5jh_BTgkqcnQyrJOc5J4-1AdJvWFMKkoWjVPMJtIChhBv3zqN6EVPY9gDBjtIpKf5GIL-PlJgtTh_iZyFO2Zxi5zAW55qo3bqa3UYSLGk_TLXV-TAjuzjXFkY47eXlLT7wvaMsBJ9nPAsk22AVqHwABRf4ndWzjQxqUtmAfT7BMWt5qWA9vhylACwjlmVAXOHwFpA1gjlL7Ef8JIc0gQnO9HMmVoL6XzL--a6soLE5s6f5-qeTLf3kgLFcq7";

  const tokenInvalidSignature =
    "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiI1NzQ4NGExNC1kYjYzLTRjNzItYTBiNy00ZTUwMjRhMThiZDciLCJzdGF0ZSI6Ijc2MmMyMjc5YmQxMDIyNTFmMmZiNTI5ZThiMDkyMGM3MzkzMmQ0NGZkOTg3NmIwOTdiNzBiMzY2MzAyZmFlYzVhYmEwZDY5MTI0NWFiMTQ4ZjY0NzhkYTYxNjZlYzQwNmUwNTAxYTM5OWNhMDA3NGVjYTMzNDMxNjAzYTkwOWIyIiwic2NvcGUiOiJYdW1tUGtjZSIsImF1ZCI6IjU3NDg0YTE0LWRiNjMtNGM3Mi1hMGI3LTRlNTAyNGExOGJkNyIsInN1YiI6InJuOFlaaTRWRUZaQVJhdk50Ym9wcUVmaDZOWHljWGc3ZU4iLCJlbWFpbCI6IjU3NDg0YTE0LWRiNjMtNGM3Mi1hMGI3LTRlNTAyNGExOGJkNytybjhZWmk0VkVGWkFSYXZOdGJvcHFFZmg2Tlh5Y1hnN2VOQHh1bW0ubWUiLCJhcHBfdXVpZHY0IjoiNTc0ODRhMTQtZGI2My00YzcyLWEwYjctNGU1MDI0YTE4YmQ3IiwiYXBwX25hbWUiOiJQT0FQIFRlc3QiLCJwYXlsb2FkX3V1aWR2NCI6IjgxMmMzMmFjLWI4ZTctNGYyZi05ZTdlLWY0ZDgwZTQ0NWJkYSIsInVzZXJ0b2tlbl91dWlkdjQiOiJhNmZmZGFjNi01OTFjLTQxZDEtOWE1YS1iOGU5NDc3Y2U0ODgiLCJuZXR3b3JrX3R5cGUiOiJURVNUTkVUIiwibmV0d29ya19lbmRwb2ludCI6IndzczovL3MuYWx0bmV0LnJpcHBsZXRlc3QubmV0OjUxMjMzIiwiaWF0IjoxNjg3NjI3OTMwLCJleHAiOjE2ODc3MTQzMzAsImlzcyI6Imh0dHBzOi8vb2F1dGgyLnh1bW0uYXBwIn0.un1DDFFE5L5v5kjUR6uGCR8P-KIdOofACMU09wIOQbKInmFN-N09CJqSzzb2Oq07WvqZ1XYiQVKBK4iZ36OFXwRLP38s44_u9IUZOtNevUWSyMz5vk_tBx8MSKgt8E-s5hkWQzPMeQC9pRRKtwrzOqjn0zyBbtbHoyq6nY2rmstiwycT1fENGETi_cUJVKvVW6ZA-rZqNt33WmuClVdOdf7QumeTh-4mXw8cSRJLRLcdJiC2aKHzvTjs0BICYoYynVS-5jh_BTgkqcnQyrJOc5J4-1AdJvWFMKkoWjVPMJtIChhBv3zqN6EVPY9gDBjtIpKf5GIL-PlJgtTh_iZyFO2Zxi5zAW55qo3bqa3UYSLGk_TLXV-TAjuzjXFkY47eXlLT7wvaMsBJ9nPAsk22AVqHwABRf4ndWzjQxqUtmAfT7BMWt5qWA9vhylACwjlmVAXOHwFpA1gjlL7Ef8JIc0gQnO9HMmVoL6XzL--a6soLE5s6f5-qeTLf3kgLFcq";

  const decoded = {
    client_id: "57484a14-db63-4c72-a0b7-4e5024a18bd7",
    state:
      "762c2279bd102251f2fb529e8b0920c73932d44fd9876b097b70b366302faec5aba0d691245ab148f6478da6166ec406e0501a399ca0074eca33431603a909b2",
    scope: "XummPkce",
    aud: "57484a14-db63-4c72-a0b7-4e5024a18bd7",
    sub: "rn8YZi4VEFZARavNtbopqEfh6NXycXg7eN",
    email:
      "57484a14-db63-4c72-a0b7-4e5024a18bd7+rn8YZi4VEFZARavNtbopqEfh6NXycXg7eN@xumm.me",
    app_uuidv4: "57484a14-db63-4c72-a0b7-4e5024a18bd7",
    app_name: "POAP Test",
    payload_uuidv4: "812c32ac-b8e7-4f2f-9e7e-f4d80e445bda",
    usertoken_uuidv4: "a6ffdac6-591c-41d1-9a5a-b8e9477ce488",
    network_type: "TESTNET",
    network_endpoint: "wss://s.altnet.rippletest.net:51233",
    iat: 1687627930,
    exp: 1687714330,
    iss: "https://oauth2.xumm.app",
  };

  test("valid decode", async () => {
    const data = jwt.decode(token);
    expect(data).toStrictEqual(decoded);
  });
});
